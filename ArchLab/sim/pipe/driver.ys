#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
    # corrupt all the unused registers to prevent assumptions
    irmovq $0x5710331, %rax
    irmovq $0x5710331, %rcx
    irmovq $0x5710331, %rbp
    irmovq $0x5710331, %r8
    irmovq $0x5710331, %r9
    irmovq $0x5710331, %r10
    irmovq $0x5710331, %r11
    irmovq $0x5710331, %r12
    irmovq $0x5710331, %r13
    irmovq $0x5710331, %r14
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Ahmet Emre KILIÃ‡ 2380616
#	Modifications:
# 1. Added 8x8 Loop Unroller
# 2. Changed the places of load and copy instructions to avoid stalling from load/use hazard
# 3. Added a JumpTree (very much alike jump table) for the leftovers after the loop
# 4. Changed constant registers + addq to iaddq for better performance
# As the modifications state, this function basically evaluates 8 elements at once and then uses a JumpTree for the leftover elements from the Loop
#
# Why 8x8 ? There was no direct choosing for the size other than the fact that JumpTree works best for higher sizes such as 8,10,12
# maybe there is an increase in performance for higher sizes but i could not do it since idea of JumpTree came to my mind at last second
#
# What is this JumpTree? JumpTree is basically tree version of JumpTable, it dynamically detects how many elements are leftover from the main loop
# and jumps to the remaining length and falls through from there.
#
# Isn't code portion
#				mrmovq 40(%rdi), %r11	# read val from src
#				jle CF6COND
# very dangerous ? At first hand it looks very dangerous, but JumpTree never uses jg to jump directly to the table, so since CC for greater cond. will
# not be set beforehand, it always jumps ahead to CFXCOND incase of direct jump from the table.
#
#	CF7:
#	mrmovq 48(%rdi), %r11	# read val from src
#	rmmovq %r11, 48(%rsi)	# and cpy into dest
#	andq %r11, %r11				# val <= 0 ? CC Set for 7th element
# There is stalling in this code portion ? Unfortunately i could not find a way to properly prevent this stalling. Initially i thought doing it just as i did
# in loop unrollers would be fine, but since in the loop unrollers it is guaranteed that there will be 8 elements it can set the values beforehand meanwhile it is not
# guaranteed for leftovers.
#
# Sidenote: Only way to make this more optimized would be choosing a better size (probably) and impletenting a JumpTable with jmpq.
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0
	iaddq $-10,%rdx		# len < 8?
	jl DoRest			# if so, goto JumpTree for leftovers:
Npos0:
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
	andq %r10, %r10				# val <= 0?
	jle Npos1							# if so, goto Npos1:
	iaddq $1, %rax				# count++
Npos1:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11				# val <= 0?
	jle Npos2							# if so, goto Npos2:
	iaddq $1, %rax				# count++
Npos2:
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10				# val <= 0?
	jle Npos3							# if so, goto Npos3:
	iaddq $1, %rax				# count++
Npos3:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11				# val <= 0?
	jle Npos4							# if so, goto Npos4:
	iaddq $1, %rax				# count++
Npos4:
	mrmovq 40(%rdi), %r11	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	andq %r10, %r10				# val <= 0?
	jle Npos5							# if so, goto Npos5:
	iaddq $1, %rax				# count++
Npos5:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r11, 40(%rsi)	# ...and store it to dst
	andq %r11, %r11				# val <= 0?
	jle Npos6							# if so, goto Npos6:
	iaddq $1, %rax				# count++
Npos6:
	mrmovq 56(%rdi), %r11	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	andq %r10, %r10				# val <= 0?
	jle Npos7							# if so, goto Npos7:
	iaddq $1, %rax				# count++
Npos7:
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle Npos8		# if so, goto Loop9:
	iaddq $1, %rax
Npos8:
	mrmovq 72(%rdi), %r11	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos9		# if so, goto Loop10:
	iaddq $1, %rax		# count++
Npos9:	#mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r11, 72(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle Unroll		# if so, goto Loop:
	iaddq $1, %rax		# count++
Unroll:
	iaddq $80, %rdi				# src += 8
	iaddq $80, %rsi				# dst += 8
	iaddq $-10,%rdx				# len >= 8?
	jge Npos0							# if so, goto Npos0:

DoRest:
	iaddq $10, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	iaddq jumptable, %rdx
	mrmovq (%rdx), %rdx
	subq %r13, %r13
	jmpq %rdx
	.align 8
	jumptable:
		.quad Done
		.quad Remain1
		.quad Remain2
		.quad Remain3
		.quad Remain4
		.quad Remain5
		.quad Remain6
		.quad Remain7
		.quad Remain8
		.quad Remain9


Remain9:
	mrmovq 64(%rdi), %r11	# read val from src...
	rmmovq %r11, 64(%rsi)
	andq %r11, %r11		# val <= 0?

Remain8:
	mrmovq 56(%rdi), %r11	# read val from src...
	jle Remain82		# if so, goto Npos:
	iaddq $0x1, %rax		# count++

Remain82:

	rmmovq %r11, 56(%rsi)
	andq %r11, %r11		# val <= 0?
Remain7:
	mrmovq 48(%rdi), %r11	# read val from src...
	jle Remain72		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain72:

	rmmovq %r11, 48(%rsi)
	andq %r11, %r11		# val <= 0?

Remain6:
	mrmovq 40(%rdi), %r11	# read val from src...
	jle Remain62		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain62:

	rmmovq %r11, 40(%rsi)
	andq %r11, %r11		# val <= 0?
Remain5:
	mrmovq 32(%rdi), %r11	# read val from src...
	jle Remain52		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain52:

	rmmovq %r11, 32(%rsi)
	andq %r11, %r11		# val <= 0?
Remain4:
	mrmovq 24(%rdi), %r11	# read val from src...
	jle Remain42	# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain42:

	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
Remain3:
	mrmovq 16(%rdi), %r11	# read val from src...
	jle Remain32		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain32:

	rmmovq %r11, 16(%rsi)
	andq %r11, %r11		# val <= 0?
Remain2:
	mrmovq 8(%rdi), %r11	# read val from src...
	jle Remain22		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain22:

	rmmovq %r11, 8(%rsi)
	andq %r11, %r11		# val <= 0?
Remain1:
	mrmovq (%rdi), %r11	# read val from src...
	jle Remain12		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain12:

	rmmovq %r11, (%rsi)
	andq %r11, %r11		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $0x1, %rax		# count++



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 2.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $2,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $4,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
