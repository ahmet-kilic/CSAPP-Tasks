                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d005000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x03c: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x046: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x050: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x05a: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x064: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x06e: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x078: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x082: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x08c: 809f00000000000000   | 	call ncopy		 
0x095: 806204000000000000   | 	call check	        # Call checker code
0x09e: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x09f:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Ahmet Emre KILIÃ‡ 2380616
                            | #	Modifications:
                            | # 1. Added 8x8 Loop Unroller
                            | # 2. Changed the places of load and copy instructions to avoid stalling from load/use hazard
                            | # 3. Added a JumpTree (very much alike jump table) for the leftovers after the loop
                            | # 4. Changed constant registers + addq to iaddq for better performance
                            | # As the modifications state, this function basically evaluates 8 elements at once and then uses a JumpTree for the leftover elements from the Loop
                            | #
                            | # Why 8x8 ? There was no direct choosing for the size other than the fact that JumpTree works best for higher sizes such as 8,10,12
                            | # maybe there is an increase in performance for higher sizes but i could not do it since idea of JumpTree came to my mind at last second
                            | #
                            | # What is this JumpTree? JumpTree is basically tree version of JumpTable, it dynamically detects how many elements are leftover from the main loop
                            | # and jumps to the remaining length and falls through from there.
                            | #
                            | # Isn't code portion
                            | #				mrmovq 40(%rdi), %r11	# read val from src
                            | #				jle CF6COND
                            | # very dangerous ? At first hand it looks very dangerous, but JumpTree never uses jg to jump directly to the table, so since CC for greater cond. will
                            | # not be set beforehand, it always jumps ahead to CFXCOND incase of direct jump from the table.
                            | #
                            | #	CF7:
                            | #	mrmovq 48(%rdi), %r11	# read val from src
                            | #	rmmovq %r11, 48(%rsi)	# and cpy into dest
                            | #	andq %r11, %r11				# val <= 0 ? CC Set for 7th element
                            | # There is stalling in this code portion ? Unfortunately i could not find a way to properly prevent this stalling. Initially i thought doing it just as i did
                            | # in loop unrollers would be fine, but since in the loop unrollers it is guaranteed that there will be 8 elements it can set the values beforehand meanwhile it is not
                            | # guaranteed for leftovers.
                            | #
                            | # Sidenote: Only way to make this more optimized would be choosing a better size (probably) and impletenting a JumpTable with jmpq.
                            | #
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x09f:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x09f: 6300                 | 	xorq %rax,%rax		# count = 0
0x0a1: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx		# len < 8?
0x0ab: 727502000000000000   | 	jl DoRest			# if so, goto JumpTree for leftovers:
0x0b4:                      | Npos0:
0x0b4: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x0be: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x0c8: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x0d2: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x0d4: 71e700000000000000   | 	jle Npos1							# if so, goto Npos1:
0x0dd: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x0e7:                      | Npos1:
0x0e7: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0f1: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x0fb: 62bb                 | 	andq %r11, %r11				# val <= 0?
0x0fd: 711001000000000000   | 	jle Npos2							# if so, goto Npos2:
0x106: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x110:                      | Npos2:
0x110: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x11a: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x124: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x126: 713901000000000000   | 	jle Npos3							# if so, goto Npos3:
0x12f: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x139:                      | Npos3:
0x139: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x143: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x14d: 62bb                 | 	andq %r11, %r11				# val <= 0?
0x14f: 716201000000000000   | 	jle Npos4							# if so, goto Npos4:
0x158: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x162:                      | Npos4:
0x162: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x16c: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x176: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x178: 718b01000000000000   | 	jle Npos5							# if so, goto Npos5:
0x181: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x18b:                      | Npos5:
0x18b: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x195: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
0x19f: 62bb                 | 	andq %r11, %r11				# val <= 0?
0x1a1: 71b401000000000000   | 	jle Npos6							# if so, goto Npos6:
0x1aa: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x1b4:                      | Npos6:
0x1b4: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x1be: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x1c8: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x1ca: 71dd01000000000000   | 	jle Npos7							# if so, goto Npos7:
0x1d3: c0f00100000000000000 | 	iaddq $1, %rax				# count++
0x1dd:                      | Npos7:
0x1dd: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10	# read val from src...
0x1e7: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x1f1: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x1f3: 710602000000000000   | 	jle Npos8		# if so, goto Loop9:
0x1fc: c0f00100000000000000 | 	iaddq $1, %rax
0x206:                      | Npos8:
0x206: 50b74800000000000000 | 	mrmovq 72(%rdi), %r11	# read val from src...
0x210: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x21a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x21c: 712f02000000000000   | 	jle Npos9		# if so, goto Loop10:
0x225: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x22f:                      | Npos9:	#mrmovq 64(%rdi), %r10	# read val from src...
0x22f: 40b64800000000000000 | 	rmmovq %r11, 72(%rsi)	# ...and store it to dst
0x239: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x23b: 714e02000000000000   | 	jle Unroll		# if so, goto Loop:
0x244: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x24e:                      | Unroll:
0x24e: c0f75000000000000000 | 	iaddq $80, %rdi				# src += 8
0x258: c0f65000000000000000 | 	iaddq $80, %rsi				# dst += 8
0x262: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx				# len >= 8?
0x26c: 75b400000000000000   | 	jge Npos0							# if so, goto Npos0:
                            | 
0x275:                      | DoRest:
0x275: c0f20a00000000000000 | 	iaddq $10, %rdx
0x27f: 6022                 | 	addq %rdx, %rdx
0x281: 6022                 | 	addq %rdx, %rdx
0x283: 6022                 | 	addq %rdx, %rdx
0x285: c0f2a002000000000000 | 	iaddq jumptable, %rdx
0x28f: 50220000000000000000 | 	mrmovq (%rdx), %rdx
0x299: 61dd                 | 	subq %r13, %r13
0x29b: e02f                 | 	jmpq %rdx
0x2a0:                      | 	.align 8
0x2a0:                      | 	jumptable:
0x2a0: 6104000000000000     | 		.quad Done
0x2a8: 2504000000000000     | 		.quad Remain1
0x2b0: fc03000000000000     | 		.quad Remain2
0x2b8: d303000000000000     | 		.quad Remain3
0x2c0: aa03000000000000     | 		.quad Remain4
0x2c8: 8103000000000000     | 		.quad Remain5
0x2d0: 5803000000000000     | 		.quad Remain6
0x2d8: 2f03000000000000     | 		.quad Remain7
0x2e0: 0603000000000000     | 		.quad Remain8
0x2e8: f002000000000000     | 		.quad Remain9
                            | 
                            | 
0x2f0:                      | Remain9:
0x2f0: 50b74000000000000000 | 	mrmovq 64(%rdi), %r11	# read val from src...
0x2fa: 40b64000000000000000 | 	rmmovq %r11, 64(%rsi)
0x304: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x306:                      | Remain8:
0x306: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x310: 712303000000000000   | 	jle Remain82		# if so, goto Npos:
0x319: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
                            | 
0x323:                      | Remain82:
                            | 
0x323: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x32d: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x32f:                      | Remain7:
0x32f: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11	# read val from src...
0x339: 714c03000000000000   | 	jle Remain72		# if so, goto Npos:
0x342: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x34c:                      | Remain72:
                            | 
0x34c: 40b63000000000000000 | 	rmmovq %r11, 48(%rsi)
0x356: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x358:                      | Remain6:
0x358: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x362: 717503000000000000   | 	jle Remain62		# if so, goto Npos:
0x36b: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x375:                      | Remain62:
                            | 
0x375: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x37f: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x381:                      | Remain5:
0x381: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11	# read val from src...
0x38b: 719e03000000000000   | 	jle Remain52		# if so, goto Npos:
0x394: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x39e:                      | Remain52:
                            | 
0x39e: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)
0x3a8: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3aa:                      | Remain4:
0x3aa: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x3b4: 71c703000000000000   | 	jle Remain42	# if so, goto Npos:
0x3bd: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x3c7:                      | Remain42:
                            | 
0x3c7: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x3d1: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3d3:                      | Remain3:
0x3d3: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11	# read val from src...
0x3dd: 71f003000000000000   | 	jle Remain32		# if so, goto Npos:
0x3e6: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x3f0:                      | Remain32:
                            | 
0x3f0: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x3fa: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3fc:                      | Remain2:
0x3fc: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x406: 711904000000000000   | 	jle Remain22		# if so, goto Npos:
0x40f: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x419:                      | Remain22:
                            | 
0x419: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x423: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x425:                      | Remain1:
0x425: 50b70000000000000000 | 	mrmovq (%rdi), %r11	# read val from src...
0x42f: 714204000000000000   | 	jle Remain12		# if so, goto Npos:
0x438: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x442:                      | Remain12:
                            | 
0x442: 40b60000000000000000 | 	rmmovq %r11, (%rsi)
0x44c: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x44e: 716104000000000000   | 	jle Done		# if so, goto Npos:
0x457: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x461:                      | Done:
0x461: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x462:                      | End:
                            | #/* $end ncopy-ys */
0x462:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 2.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x462:                      | check:
                            | 	# Return value test
0x462: 30fa0200000000000000 | 	irmovq $2,%r10
0x46c: 61a0                 | 	subq %r10,%rax
0x46e: 738a04000000000000   | 	je checkb
0x477: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x481: 70c805000000000000   | 	jmp cdone
0x48a:                      | checkb:
                            | 	# Code length check
0x48a: 30f06204000000000000 | 	irmovq EndFun,%rax
0x494: 30f29f00000000000000 | 	irmovq StartFun,%rdx
0x49e: 6120                 | 	subq %rdx,%rax
0x4a0: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x4aa: 6102                 | 	subq %rax,%rdx
0x4ac: 75c804000000000000   | 	jge checkm
0x4b5: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x4bf: 70c805000000000000   | 	jmp cdone
0x4c8:                      | checkm:
0x4c8: 30f20806000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x4d2: 30f3d005000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x4dc: 30f70400000000000000 | 	irmovq $4,%rdi  # Count
0x4e6: 6277                 | 	andq %rdi,%rdi
0x4e8: 734605000000000000   | 	je checkpre         # Skip check if count = 0
0x4f1:                      | mcloop:
0x4f1: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x4fb: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x505: 6160                 | 	subq %rsi,%rax
0x507: 732305000000000000   | 	je  mok
0x510: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x51a: 70c805000000000000   | 	jmp cdone
0x523:                      | mok:
0x523: 30f00800000000000000 | 	irmovq $8,%rax
0x52d: 6002                 | 	addq %rax,%rdx	  # dest ++
0x52f: 6003                 | 	addq %rax,%rbx    # src++
0x531: 30f00100000000000000 | 	irmovq $1,%rax
0x53b: 6107                 | 	subq %rax,%rdi    # cnt--
0x53d: 76f104000000000000   | 	jg mcloop
0x546:                      | checkpre:
                            | 	# Check for corruption
0x546: 30f20006000000000000 | 	irmovq Predest,%rdx
0x550: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x55a: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x564: 6120                 | 	subq %rdx,%rax
0x566: 738205000000000000   | 	je checkpost
0x56f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x579: 70c805000000000000   | 	jmp cdone
0x582:                      | checkpost:
                            | 	# Check for corruption
0x582: 30f22806000000000000 | 	irmovq Postdest,%rdx
0x58c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x596: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x5a0: 6120                 | 	subq %rdx,%rax
0x5a2: 73be05000000000000   | 	je checkok
0x5ab: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x5b5: 70c805000000000000   | 	jmp cdone
0x5be:                      | checkok:
                            | 	# Successful checks
0x5be: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x5c8:                      | cdone:
0x5c8: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x5d0:                      | 	.align 8
0x5d0:                      | src:
0x5d0: 0100000000000000     | 	.quad 1
0x5d8: 0200000000000000     | 	.quad 2
0x5e0: fdffffffffffffff     | 	.quad -3
0x5e8: fcffffffffffffff     | 	.quad -4
0x5f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x600:                      | 	.align 16
0x600:                      | Predest:
0x600: fadebc0000000000     | 	.quad 0xbcdefa
0x608:                      | dest:
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628:                      | Postdest:
0x628: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x630:                      | .align 8
                            | # Run time stack
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
                            | 
0x6b0:                      | Stack:
